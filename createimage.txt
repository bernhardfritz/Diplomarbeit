    public static void createImage(String period)
    {
    	String[] time=new String[2];
    	int first=0;
    	int last=0;
    	DBManager dbman=null;
    	List<Daten> erg=null;
    	time=calcTime(period);
    	final TimeSeries series1=new TimeSeries("Lufttemperatur");
    	RegularTimePeriod t;
    	try {
			dbman=new DBManager();
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 
		System.out.println(time[0]+" "+time[1]);
    	try {
			//first=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%"+time[0]+"%' AND datum LIKE '%"+time[1]+"%' LIMIT 1");
			//last=dbman.simpleSQL("SELECT id FROM daten ORDER BY id DESC LIMIT 1");
			//last=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%"+SgetTime("HH:mm")+"%' AND datum LIKE '%"+SgetTime("dd.MM.yyyy")+"%' LIMIT 1");
			first=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%20:00%' AND datum LIKE '%13.09.2011%' LIMIT 1");
			last=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%21:00%' AND datum LIKE '%13.09.2011%' LIMIT 1");
    		erg=dbman.SQL("SELECT * FROM daten WHERE id>="+first+" AND id<="+last);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		/*int m=new Integer(d.getUhrzeit().substring(3,4));
		System.out.println(m);
		int h=new Integer(d.getUhrzeit().substring(0,2));
		System.out.println(h);
		int D=new Integer(d.getDatum().substring(0,2));
		System.out.println(D);
		int M=new Integer(d.getDatum().substring(3,5));
		System.out.println(M);
		int Y=new Integer(d.getDatum().substring(6,10));
		System.out.println(Y);
		System.out.println(d.getLtemp());
		t=new Minute(m,h,D,M,Y);*/
		//t=new Minute(0,20,13,9,2011);
		t=new Minute();
    	for(Daten d:erg)
		{
    		if(d.getLtemp()!=null&&d.getUhrzeit()!=null)
    		{
    			
    			series1.add(t,Double.parseDouble(d.getLtemp()));
    			System.out.println(d.getLtemp());
    			System.out.println(t);
			}
    		t=t.next();
		}
		
    	/*if(period.equals("Stunde"))
    	{
    		try {
				erg=dbman.suche(SgetTime("HH:"));
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    		if(erg!=null)
    		{
    			t=new Minute();
    			for(Daten d:erg)
    			{
    				series1.add(t,Double.parseDouble(d.getLtemp()));
    				t=t.next();
    			}
    		}
    	}*/
    	final TimeSeriesCollection dataset=new TimeSeriesCollection();
    	dataset.addSeries(series1);
    	final JFreeChart chart = ChartFactory.createTimeSeriesChart(
    				"Temperaturkurve für eine(n) "+period,      // chart title
    				"Zeit",                      // x axis label
    				"Temperatur (°C)",                      // y axis label
    				dataset,                  // data
    				false,                     // include legend
    				false,                     // tooltips
    				false                     // urls
    		);
    	BufferedImage bi=chart.createBufferedImage(800,400);
    		File img=new File("C:/fishfiles/graph.png");
    		try {
    			ImageIO.write(bi,"png",img);
    		} catch (IOException e) {
			// 	TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    }
    public static void createImage2(String period)
    {
    	Calendar fromcal=calcTime2(period);
    	Calendar tocal=Calendar.getInstance();
    	String fromtime=timeFormat(fromcal.getTime().getHours())+":"+timeFormat(fromcal.getTime().getMinutes());
    	String fromdate=timeFormat(fromcal.getTime().getDate())+"."+timeFormat((fromcal.getTime().getMonth()+1))+"."+(fromcal.getTime().getYear()+1900);
    	String totime=timeFormat(tocal.getTime().getHours())+":"+timeFormat(tocal.getTime().getMinutes());
    	String todate=timeFormat(tocal.getTime().getDate())+"."+timeFormat((tocal.getTime().getMonth()+1))+"."+(tocal.getTime().getYear()+1900);
    	int fromid;
    	int toid;
    	DBManager dbman=null;
    	List<Daten> erg=null;
    	final TimeSeries series1=new TimeSeries("Lufttemperatur");
    	RegularTimePeriod t;
    	try {
			dbman=new DBManager();
		} catch (ClassNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} 
		System.out.println("Von "+fromtime+" "+fromdate);
		System.out.println("Bis "+totime+" "+todate);
    	try {
			fromid=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%"+fromtime+"%' AND datum LIKE '%"+fromdate+"%' LIMIT 1");
			toid=dbman.simpleSQL("SELECT id FROM daten ORDER BY id DESC LIMIT 1");
			//toid=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%"+totime+"%' AND datum LIKE '%"+todate+"%' LIMIT 1");
			//fromid=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%20:00%' AND datum LIKE '%13.09.2011%' LIMIT 1");
			//toid=dbman.simpleSQL("SELECT id FROM daten WHERE uhrzeit LIKE '%21:00%' AND datum LIKE '%13.09.2011%' LIMIT 1");
    		erg=dbman.SQL("SELECT * FROM daten WHERE id>="+fromid+" AND id<="+toid);
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		//t=new Minute();
		t=new Minute(fromcal.getTime());
		for(Daten d:erg)
		{
			if(d.getLtemp()!=null&&d.getUhrzeit()!=null)
			{    			
				series1.add(t,Double.parseDouble(d.getLtemp()));
				System.out.println(d.getLtemp());
				System.out.println(t);
			}
			t=t.next();
		}
    	final TimeSeriesCollection dataset=new TimeSeriesCollection();
    	dataset.addSeries(series1);
    	final JFreeChart chart = ChartFactory.createTimeSeriesChart(
    				"Temperaturkurve für eine(n) "+period,      // chart title
    				"Zeit",                      // x axis label
    				"Temperatur (°C)",                      // y axis label
    				dataset,                  // data
    				false,                     // include legend
    				false,                     // tooltips
    				false                     // urls
    		);
    	BufferedImage bi=chart.createBufferedImage(800,400);
    		File img=new File("C:/fishfiles/graph.png");
    		try {
    			ImageIO.write(bi,"png",img);
    		} catch (IOException e) {
			// 	TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    }